{"version":3,"file":"noRegex.min.js","sources":["../src/noRegex.ts"],"sourcesContent":["export interface iNoRegexOpt {\r\n    acceptStrings?: boolean,\r\n    acceptNumbers?: boolean,\r\n    acceptUppercase?: boolean,\r\n    acceptLowercase?: boolean,\r\n    acceptAccents?: boolean,\r\n    acceptSpecialChars?: boolean,\r\n    acceptWhiteSpaces?: boolean,\r\n    specialRules?: {\r\n        allowedChars?: string,\r\n        forbiddenChars?: string,\r\n    },\r\n    length?: {\r\n        min?: number,\r\n        max?: number,\r\n        equals?: number,\r\n    },\r\n    affix?: {\r\n        startsWith?: string,\r\n        endsWith?: string,\r\n    }\r\n}\r\n\r\nexport default class noRegex {\r\n    static DEFAULT :iNoRegexOpt = {\r\n        acceptStrings: true,\r\n        acceptNumbers: true,\r\n        acceptUppercase: true,\r\n        acceptLowercase: true,\r\n        acceptAccents: true,\r\n        acceptSpecialChars: true,\r\n        acceptWhiteSpaces: true,\r\n        specialRules: {\r\n            allowedChars: undefined,\r\n            forbiddenChars: undefined,\r\n        },\r\n        length: {\r\n            min: undefined,\r\n            max: undefined,\r\n            equals: undefined,\r\n        },\r\n        affix: {\r\n            startsWith: undefined,\r\n            endsWith: undefined,\r\n        }\r\n    };\r\n\r\n    static CHAR_LISTS = {\r\n        LOWER_CASE: 'abcdefghijklmnopqrstuvwxyz',\r\n        UPPER_CASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\r\n        /*ACCENTS_BCK: 'ÀÁÂÃÄÅĄĀāàáâãäåąßÒÓÔÕÕÖØŐòóôőõöøĎďŽžÈÉÊËĘèéêëęðÇçČčĆćÐÌÍÎÏĪìíîïīÙÚÛÜŰùűúûüĽĹŁľĺłÑŇŃňñńŔŕŠŚŞšśşŤťŸÝÿýŽŻŹžżźđĢĞģğ',\r\n        ACCENTS_REPLACE_BCK: 'AAAAAAAAaaaaaaaasOOOOOOOOoooooooDdZzEEEEEeeeeeeCcCcCcDIIIIIiiiiiUUUUUuuuuuLLLlllNNNnnnRrSSSsssTtYYyyZZZzzzdGGgg',*/\r\n        ACCENTS_UPPER: 'ÀÁÂÃÄÅĄĀßÒÓÔÕÕÖØŐĎŽžÈÉÊËĘÇČĆÐÌÍÎÏĪÙÚÛÜŰĽĹŁÑŇŃŔŠŚŞŤŸÝŽŻŹĢĞ',\r\n        ACCENTS_UPPER_REPLACE: 'AAAAAAAASOOOOOOOODZEEEEEECCCDIIIIIUUUUULLLNNNRSSSTYYZZZGG',\r\n        ACCENTS_LOWER: 'āàáâãäåąòóôőõöøďžèéêëęðçčćìíîïīùűúûüľĺłňñńŕšśşťÿýžżźđģğ',\r\n        ACCENTS_LOWER_REPLACE: 'aaaaaaaaooooooodzeeeeeeccciiiiiuuuuulllnnnrssstyyzzzdgg',\r\n        NUMBERS: '0123456789',\r\n        SPECIAL_CHARS: '\\\\/.,;+*^$€£¤[](){}=!?<>|:-\"\\'#%&`²~_@§',\r\n    };\r\n\r\n    constructor(private _options?: iNoRegexOpt){\r\n        this._options = {\r\n            ...noRegex.DEFAULT,\r\n            ..._options\r\n        };\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Test if the given string match options.\r\n     * @param str\r\n     * @return boolean\r\n     */\r\n    public test = (str: string) :boolean  => {\r\n        let result = true;\r\n        if((result) && (!this._options.acceptNumbers)){\r\n            result = !this._containNumbers(str);\r\n        }\r\n        if((result) && (!this._options.acceptLowercase)){\r\n            result = !this._containLowercase(str);\r\n        }\r\n        if((result) && (!this._options.acceptUppercase)){\r\n            result = !this._containUppercase(str);\r\n        }\r\n        if((result) && (!this._options.acceptAccents)){\r\n            result = !this._containAccents(str);\r\n        }\r\n        if((result) && (!this._options.acceptStrings)){\r\n            result = !this._containStrings(str);\r\n        }\r\n        if((result) && (!this._options.acceptSpecialChars)){\r\n            result = !this._containSpecialChars(str);\r\n        }\r\n        if((result) && (!this._options.acceptWhiteSpaces)){\r\n            result = !this._containWhiteSpaces(str);\r\n        }\r\n\r\n        //specialRules opts\r\n        if((result) && (typeof this._options.specialRules.forbiddenChars === 'string')){\r\n            result = !this._testCharList(str, this._options.specialRules.forbiddenChars);\r\n        }\r\n\r\n        //length opts\r\n        if((result) && (typeof this._options.length.equals === 'number')){\r\n            result = (str.length === this._options.length.equals);\r\n        }\r\n        if((result) && (typeof this._options.length.min === 'number')){\r\n            result = (str.length >= this._options.length.min);\r\n        }\r\n        if((result) && (typeof this._options.length.max === 'number')){\r\n            result = (str.length <= this._options.length.max);\r\n        }\r\n\r\n        //affix opts\r\n        if((result) && (typeof this._options.affix.startsWith === 'string')){\r\n            result = (str.startsWith(this._options.affix.startsWith));\r\n        }\r\n        if((result) && (typeof this._options.affix.endsWith === 'string')){\r\n            result = (str.endsWith(this._options.affix.endsWith));\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Remove all characters from the given string that doesn't match options.\r\n     * @param str\r\n     * @return string\r\n     */\r\n    public format = (str: string) :string => {\r\n        if(!this._options.acceptNumbers){\r\n            str = this._replaceNumbers(str);\r\n        }\r\n        if(!this._options.acceptLowercase){\r\n            str = this._replaceLowercase(str);\r\n        }\r\n        if(!this._options.acceptUppercase){\r\n            str = this._replaceUppercase(str);\r\n        }\r\n        if(!this._options.acceptAccents){\r\n            str = this._replaceAccents(str);\r\n        }\r\n        if(!this._options.acceptStrings){\r\n            str = this._replaceStrings(str);\r\n        }\r\n        if(!this._options.acceptSpecialChars){\r\n            str = this._replaceSpecialChars(str);\r\n        }\r\n        if(!this._options.acceptWhiteSpaces){\r\n            str = this._replaceWhiteSpaces(str);\r\n        }\r\n\r\n        //specialRules opts\r\n        if(typeof this._options.specialRules.forbiddenChars === 'string'){\r\n            str = this._removeCharList(str, this._options.specialRules.forbiddenChars);\r\n        }\r\n\r\n        //length opts\r\n        if(typeof this._options.length.equals === 'number'){\r\n            if(str.length < (this._options.length.equals - this._getMissingAffixLength(str))){\r\n                str = str.padEnd((this._options.length.equals - this._getMissingAffixLength(str)), this._getAllowedCharToFill());\r\n            }\r\n            if(str.length > (this._options.length.equals - this._getMissingAffixLength(str))){\r\n                str = str.substr(0, (this._options.length.equals  - this._getMissingAffixLength(str)));\r\n            }\r\n        }\r\n        if((typeof this._options.length.min === 'number') && (str.length < this._options.length.min)){\r\n            str = str.padEnd(this._options.length.min, this._getAllowedCharToFill());\r\n        }\r\n        if((typeof this._options.length.max === 'number') && (str.length > (this._options.length.max - this._getMissingAffixLength(str)))){\r\n            str = (str.length < (this._options.length.max - this._getMissingAffixLength(str))) ? str : str.substr(0, (this._options.length.max - this._getMissingAffixLength(str)));\r\n        }\r\n\r\n        //affix opts\r\n        if(typeof this._options.affix.startsWith === 'string'){\r\n            str = (str.startsWith(this._options.affix.startsWith)) ? str : (this._options.affix.startsWith + str);\r\n        }\r\n        if(typeof this._options.affix.endsWith === 'string'){\r\n            str = (str.endsWith(this._options.affix.endsWith)) ? str : (str + this._options.affix.endsWith);\r\n        }\r\n\r\n        return str;\r\n    };\r\n\r\n\r\n\r\n    //HELPERS\r\n    private _isCharAllowedBySpecialRules = (char: string) :boolean => {\r\n        return (typeof this._options.specialRules.allowedChars === 'string') && (this._options.specialRules.allowedChars.split('').indexOf(char) !== -1);\r\n    };\r\n    private _isCharForbiddenBySpecialRules = (char: string) :boolean => {\r\n        return (typeof this._options.specialRules.forbiddenChars === 'string') && (this._options.specialRules.forbiddenChars.indexOf(char) !== -1);\r\n    };\r\n\r\n    private _testCharList = (target: string, testList: string) :boolean => {\r\n        let result = false;\r\n        let charArrayTest = testList.split('');\r\n        for (let i = 0; i < charArrayTest.length; i++) {\r\n            if ((target.indexOf(charArrayTest[i]) !== -1) && (!this._isCharAllowedBySpecialRules(charArrayTest[i]))) {\r\n                result = true;\r\n                break;\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n\r\n    private _replaceCharList = (target: string, testList: string, replaceList: string) :string => {\r\n        let testArray = testList.split('');\r\n        let replaceArray = replaceList.split('');\r\n        return target.split('').map((char) => {\r\n            return ((testArray.indexOf(char) === -1) || (this._isCharAllowedBySpecialRules(char))) ? char : replaceArray[testArray.indexOf(char)];\r\n        }).join('');\r\n    };\r\n\r\n    private _removeCharList = (target: string, testList: string) :string => {\r\n        let testArray = testList.split('');\r\n        return target.split('').map((char) => {\r\n            return ((testArray.indexOf(char) === -1) || (this._isCharAllowedBySpecialRules(char))) ? char : '';\r\n        }).join('');\r\n    };\r\n\r\n    private _getAllowedCharToFill = () :string => {\r\n        let result = '';\r\n        if(typeof this._options.specialRules.allowedChars === 'string'){\r\n            result = this._options.specialRules.allowedChars[0];\r\n        } else if(this._options.acceptSpecialChars && (!this._isCharForbiddenBySpecialRules('-'))){\r\n            result = '-';\r\n        } else if(this._options.acceptSpecialChars && (!this._isCharForbiddenBySpecialRules('_'))){\r\n            result = '_';\r\n        } else if(this._options.acceptSpecialChars && (!this._isCharForbiddenBySpecialRules('.'))){\r\n            result = '.';\r\n        } else if(this._options.acceptWhiteSpaces && (!this._isCharForbiddenBySpecialRules(' '))){\r\n            result = ' ';\r\n        } else if(this._options.acceptNumbers && (!this._isCharForbiddenBySpecialRules(' 0'))){\r\n            result = '0';\r\n        } else if(this._options.acceptLowercase && (!this._isCharForbiddenBySpecialRules('a'))){\r\n            result = 'a';\r\n        } else if(this._options.acceptUppercase && (!this._isCharForbiddenBySpecialRules('A'))){\r\n            result = 'A';\r\n        } else if(this._options.acceptAccents && (!this._isCharForbiddenBySpecialRules('à'))){\r\n            result = 'à';\r\n        } else if(this._options.acceptStrings && (!this._isCharForbiddenBySpecialRules('a'))){\r\n            result = 'a';\r\n        }\r\n        return result;\r\n    };\r\n\r\n    private _getMissingAffixLength = (str) :number => {\r\n        let count = 0;\r\n        if(typeof this._options.affix.startsWith === 'string'){\r\n            count += (str.startsWith(this._options.affix.startsWith)) ? 0 : this._options.affix.startsWith.length;\r\n        }\r\n        if(typeof this._options.affix.endsWith === 'string'){\r\n            count += (str.endsWith(this._options.affix.endsWith)) ? 0 : this._options.affix.endsWith.length;\r\n        }\r\n        return count;\r\n    };\r\n\r\n\r\n\r\n    //UPPERCASE\r\n    private _containUppercase = (str: string) :boolean => {\r\n        return this._testCharList(str, noRegex.CHAR_LISTS.UPPER_CASE + noRegex.CHAR_LISTS.ACCENTS_UPPER);\r\n    };\r\n    private _replaceUppercase = (str: string) :string => {\r\n        let tmp = this._replaceCharList(str, noRegex.CHAR_LISTS.ACCENTS_UPPER, noRegex.CHAR_LISTS.ACCENTS_UPPER_REPLACE);\r\n        return this._replaceCharList(tmp, noRegex.CHAR_LISTS.UPPER_CASE, noRegex.CHAR_LISTS.LOWER_CASE);\r\n    };\r\n\r\n    //LOWERCASE\r\n    private _containLowercase = (str: string) :boolean => {\r\n        return this._testCharList(str, noRegex.CHAR_LISTS.LOWER_CASE + noRegex.CHAR_LISTS.ACCENTS_LOWER);\r\n    };\r\n    private _replaceLowercase = (str: string) :string => {\r\n        let tmp = this._replaceCharList(str, noRegex.CHAR_LISTS.ACCENTS_LOWER, noRegex.CHAR_LISTS.ACCENTS_LOWER_REPLACE);\r\n        return this._replaceCharList(tmp, noRegex.CHAR_LISTS.LOWER_CASE, noRegex.CHAR_LISTS.UPPER_CASE);\r\n    };\r\n\r\n    //STRINGS\r\n    private _containStrings = (str: string) :boolean => {\r\n        return this._testCharList(str, noRegex.CHAR_LISTS.LOWER_CASE + noRegex.CHAR_LISTS.UPPER_CASE + noRegex.CHAR_LISTS.ACCENTS_LOWER + noRegex.CHAR_LISTS.ACCENTS_UPPER);\r\n    };\r\n    private _replaceStrings = (str: string) :string => {\r\n        return this._removeCharList(str, noRegex.CHAR_LISTS.LOWER_CASE + noRegex.CHAR_LISTS.UPPER_CASE + noRegex.CHAR_LISTS.ACCENTS_LOWER + noRegex.CHAR_LISTS.ACCENTS_UPPER);\r\n    };\r\n\r\n    //NUMBERS\r\n    private _containNumbers = (str: string) :boolean => {\r\n        return this._testCharList(str, noRegex.CHAR_LISTS.NUMBERS);\r\n    };\r\n    private _replaceNumbers = (str: string) :string => {\r\n        return this._removeCharList(str, noRegex.CHAR_LISTS.NUMBERS);\r\n    };\r\n\r\n    //ACCENTS\r\n    private _containAccents = (str: string) :boolean => {\r\n        return this._testCharList(str, noRegex.CHAR_LISTS.ACCENTS_LOWER + noRegex.CHAR_LISTS.ACCENTS_UPPER);\r\n    };\r\n    private _replaceAccents = (str: string) :string => {\r\n        return this._replaceCharList(str, noRegex.CHAR_LISTS.ACCENTS_LOWER + noRegex.CHAR_LISTS.ACCENTS_UPPER, noRegex.CHAR_LISTS.ACCENTS_LOWER_REPLACE + noRegex.CHAR_LISTS.ACCENTS_UPPER_REPLACE);\r\n    };\r\n\r\n    //SPECIAL CHARS\r\n    private _containSpecialChars = (str: string) :boolean => {\r\n        return this._testCharList(str, noRegex.CHAR_LISTS.SPECIAL_CHARS);\r\n    };\r\n    private _replaceSpecialChars = (str: string) :string => {\r\n        return this._removeCharList(str, noRegex.CHAR_LISTS.SPECIAL_CHARS);\r\n    };\r\n\r\n    //WHITE SPACES\r\n    private _containWhiteSpaces = (str: string) :boolean => {\r\n        return this._testCharList(str, ' ');\r\n    };\r\n    private _replaceWhiteSpaces = (str: string) :string => {\r\n        return this._removeCharList(str, ' ');\r\n    };\r\n}\r\n"],"names":["_options","this","str","result","_this","acceptNumbers","_containNumbers","acceptLowercase","_containLowercase","acceptUppercase","_containUppercase","acceptAccents","_containAccents","acceptStrings","_containStrings","acceptSpecialChars","_containSpecialChars","acceptWhiteSpaces","_containWhiteSpaces","specialRules","forbiddenChars","_testCharList","length","equals","min","max","affix","startsWith","endsWith","_replaceNumbers","_replaceLowercase","_replaceUppercase","_replaceAccents","_replaceStrings","_replaceSpecialChars","_replaceWhiteSpaces","_removeCharList","_getMissingAffixLength","padEnd","_getAllowedCharToFill","substr","char","allowedChars","split","indexOf","target","testList","charArrayTest","i","_isCharAllowedBySpecialRules","replaceList","testArray","replaceArray","map","join","_isCharForbiddenBySpecialRules","count","noRegex","CHAR_LISTS","UPPER_CASE","ACCENTS_UPPER","tmp","_replaceCharList","ACCENTS_UPPER_REPLACE","LOWER_CASE","ACCENTS_LOWER","ACCENTS_LOWER_REPLACE","NUMBERS","SPECIAL_CHARS","DEFAULT","undefined"],"mappings":"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"}